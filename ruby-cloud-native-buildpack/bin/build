#!/usr/bin/env bash
set -eo pipefail

echo "---> Ruby Buildpack"

# 0. DOWNLOAD TOOLS
wget -qO /tmp/jq https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 && chmod +x /tmp/jq
wget -qO /tmp/yj https://github.com/sclevine/yj/releases/download/v2.0/yj-linux && chmod +x /tmp/yj

# 1. GET ARGS
layersdir=$1
plan=$3

# Compares previous ruby version to the current ruby version
rubylayer="$layersdir"/ruby
ruby_version=$(cat "$plan" | /tmp/yj -t | /tmp/jq -r '.entries[] | select(.name == "ruby") | .version')
previous_ruby_version=$(cat "$rubylayer.toml" | /tmp/yj -t | /tmp/jq -r .metadata 2>/dev/null || echo 'not found')

if [[ $ruby_version == $previous_ruby_version ]] ; then
    # Determine if ruby version hasn't changed, so it can reuse existing ruby without downloading it again
    echo "---> Reusing Ruby $ruby_version"
else
    # Determine if there has been a change in ruby version and install the necessary version
    # 2. MAKE RUBY AVAILABLE DURING LAUNCH
    echo -e "cache = true\nlaunch = true\nmetadata = \"$ruby_version\"" > "$rubylayer.toml"

    # 3. DOWNLOAD RUBY
    echo "---> Downloading and extracting Ruby $ruby_version"
    mkdir -p "$rubylayer"
    ruby_url=https://s3-external-1.amazonaws.com/heroku-buildpack-ruby/heroku-18/ruby-$ruby_version.tgz
    wget -q -O - "$ruby_url" | tar -xzf - -C "$rubylayer"
fi

# 4. MAKE RUBY AVAILABLE TO THIS SCRIPT
export PATH="$rubylayer"/bin:$PATH
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH:+${LD_LIBRARY_PATH}:}"$rubylayer/lib"

# 5. INSTALL BUNDLER
echo "---> Installing bundler"
gem install bundler --no-ri --no-rdoc

# 6. INSTALL GEMS

# Compares previous Gemfile.lock checksum to the current Gemfile.lock
bundlerlayer="$layersdir/bundler"
local_bundler_checksum=$(sha256sum Gemfile.lock | cut -d ' ' -f 1)
remote_bundler_checksum=$(cat "$bundlerlayer.toml" | /tmp/yj -t | /tmp/jq -r .metadata 2>/dev/null || echo 'not found')

if [[ -f Gemfile.lock && $local_bundler_checksum == $remote_bundler_checksum ]] ; then
    # Determine if no gem dependencies have changed, so it can reuse existing gems without running bundle install
    echo "---> Reusing gems"
    bundle config --local path "$bundlerlayer" >/dev/null
    bundle config --local bin "$bundlerlayer/bin" >/dev/null
else
    # Determine if there has been a gem dependency change and install new gems to the bundler layer; re-using existing and un-changed gems
    echo "---> Installing gems"
    mkdir -p "$bundlerlayer"
    echo -e "cache = true\nlaunch = true\nmetadata = \"$local_bundler_checksum\"" > "$bundlerlayer.toml"
    bundle install --path "$bundlerlayer" --binstubs "$bundlerlayer/bin"
fi

if [ ! -z ${SECRET+x} ]; then
    echo "The secret environment variable \$SECRET has been set to \"$SECRET\" ! :D"
fi

# 7. SET DEFAULT START COMMAND
echo 'processes = [{ type = "web", command = "bundle exec ruby app.rb"}]' > "$layersdir/launch.toml"

